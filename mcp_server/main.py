# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:49:25+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header

from models import (
    ApiV2ListFederationsGetResponse,
    ApiV2ListFederationsGetResponse1,
    ApiV2ListMarketsGetResponse,
    ApiV2ListMarketsGetResponse1,
    ApiV2PerformanceStatsGetResponse,
    ApiV2PerformanceStatsGetResponse1,
    ApiV2PredictionsGetResponse,
    ApiV2PredictionsIdGetResponse,
    ApiV2PredictionsIdGetResponse1,
)

app = MCPProxy(
    contact={'x-twitter': 'Rapid_API'},
    description='The Football Prediction API allows developers to get predictions for upcoming football (soccer) matches, results for past matches, and performance monitoring for statistical models.',
    title='Football Prediction API',
    version='2',
    servers=[{'url': 'https://football-prediction-api.p.rapidapi.com'}],
)


@app.get(
    '/api/v2/list-federations',
    description=""" Returns an array of all the available federations. """,
    tags=['api_federation_management'],
)
def get_api_v2_list_federations(
    x__rapid_api__key: Optional[UUID] = Header(None, alias='X-RapidApi-Key')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/list-markets',
    description=""" Returns an array of all the supported prediction markets """,
    tags=['api_federation_management'],
)
def get_api_v2_list_markets(
    x__rapid_api__key: Optional[UUID] = Header(None, alias='X-RapidApi-Key')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/performance-stats',
    description=""" Returns predictions accuracy in the last 1, 7, 14, 30 days. """,
    tags=[
        'api_federation_management',
        'api_market_management',
        'api_performance_statistics',
        'api_prediction_management',
    ],
)
def get_api_v2_performance_stats(
    x__rapid_api__key: Optional[UUID] = Header(None, alias='X-RapidApi-Key')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/predictions',
    description=""" This endpoint returns by default the next non-expired football predictions. URL parameters can be specified to show specific date in the past or future or to filter by federation and prediction market name. """,
    tags=['api_federation_management'],
)
def get_api_v2_predictions(
    x__rapid_api__key: Optional[UUID] = Header(None, alias='X-RapidApi-Key')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/predictions/{id}',
    description=""" Returns all predictions available for a match id. """,
    tags=['api_prediction_management'],
)
def get_api_v2_predictions__id(id: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
